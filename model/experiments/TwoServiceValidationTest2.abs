module TwoServiceValidationTest2;

import * from K8sService;
import * from K8sMaster;
import * from K8sUtil;
import * from ABS.DC;

interface Client{

}
class ClientObjectLow(ServiceEndpoint se, Request t) implements Client {
  Unit run(){
    Int ctr = 90;


    while (ctr > 0){
      se!invokeService(t,Duration(10));

      ctr = ctr - 1;

      await duration(1,1);
    }
  }

  Unit generateClients(Rat numOfclients, Rat delay, ServiceEndpoint service, Request task){
    while (numOfclients > 0){
      Client c = new ClientObjectLow(service,task);
      numOfclients = numOfclients - 1;
      await duration(delay,delay);
    }
  }
}

class ClientObjectHigh(ServiceEndpoint se, Request t) implements Client {
  Unit run(){
    Int ctr = 180;


    while (ctr > 0){
      se!invokeService(t,Duration(10));

      ctr = ctr - 1;

      await duration(1/2,1/2);
    }
  }

}



{
  CloudProvider cp = new CloudProvider("Cloud");
  Master master = new MasterObject(cp,1,1);
  Bool fb = master.createNodes(1,3800,4000); // 0 - 10
  fb = master.createNodes(1,3795,4000); // 1 - 9
  fb = master.createNodes(1,3700,4000); // 2 - 11

  ServiceConfig sConfigSms = ServiceConfig("service_sms", 1, 1, 10, 1, 95/100, 5/100, 10);
  PodConfig pConfigSms = PodConfig(1, 1, 0, 1000, 2500);

  ServiceConfig sConfigCall = ServiceConfig("service_call", 1, 1, 10, 1, 80/100, 5/100, 10);
  PodConfig pConfigCall = PodConfig(1, 1, 0, 1000, 2500);

  Service serviceSms = new ServiceObject(sConfigSms, pConfigSms);
  Service serviceCall = new ServiceObject(sConfigCall, pConfigCall);

  fb = master.deployService(serviceSms);
  fb = master.deployService(serviceCall);

  ServiceEndpoint serviceSmsEP = await serviceSms!getServiceEndpoint();
  ServiceEndpoint serviceCallEP = await serviceCall!getServiceEndpoint();

  Request smsReq = Request("sms", 17, 1);
  Request callReq = Request("call", 26, 1);
  Request callReqH = Request("call", 43, 1);

  Printer printer = new PrinterObject();
  List<Service> sList = list[serviceSms,serviceCall];

  printer!printStatus(master,sList,400,1);

  await duration(5,5);

  Int numOfclients = 50;
  Rat delay = 1/2;

  while (numOfclients > 0){
    Client c = new ClientObjectHigh(serviceSmsEP,smsReq);
    Client c2 = new ClientObjectLow(serviceCallEP,callReq);
    numOfclients = numOfclients - 1;
    await duration(delay,delay);
  }

  await duration(65,65);

  numOfclients = 50;
  delay = 1/2;

  while (numOfclients > 0){
    Client c = new ClientObjectLow(serviceSmsEP,smsReq);
    Client c2 = new ClientObjectHigh(serviceCallEP,callReq);
    numOfclients = numOfclients - 1;
    await duration(delay,delay);
  }

  await duration(65,65);

  numOfclients = 50;
  delay = 1/2;

  while (numOfclients > 0){
    Client c = new ClientObjectHigh(serviceSmsEP,smsReq);
    Client c2 = new ClientObjectLow(serviceCallEP,callReq);
    numOfclients = numOfclients - 1;
    await duration(delay,delay);
  }

  await duration(65,65);

  numOfclients = 50;
  delay = 1/2;

  while (numOfclients > 0){
    Client c = new ClientObjectHigh(serviceSmsEP,smsReq);
    Client c2 = new ClientObjectHigh(serviceCallEP,callReqH);
    numOfclients = numOfclients - 1;
    await duration(delay,delay);
  }

  //List<Pair<String,ConsumptionMap>> nodeMaps = await master!getNodesMap();
  //printer!printMaps(nodeMaps,0,20);
  /*
  await duration(50,50);

  ctr = 20;
  while (ctr > 0){
    Client c = new ClientObject(serviceOne,taskOne);
    ctr = ctr - 1;
  }*/

}
