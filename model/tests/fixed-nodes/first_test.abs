module MicroservicesDemoTest1;

import * from K8sService;
import * from K8sMaster;
import * from K8sUtil;
import * from K8sWorkflow;
import * from K8sClients;
import * from ABS.DC;

{
  Int timeUnitSize = 2; // [NOT USED] equivalent in seconds of a time unit
  Int costGranularity = 100; // Pods consume CPU for a request dividing the cost in this number of steps

  // cluster elements instantiation
  CloudProvider cp = new CloudProvider("Cloud");
  Master master = new MasterObject(cp,timeUnitSize,1,1,costGranularity); // CloudProvider cp, Rat timeUnitSize, Int loadPeriod, Int resourceCycle, Int costGranularity
                                                                         // loadPeriod: time unit granularity to compute loads on nodes
                                                                         // resourceCycle: after how many time units the CPU is refreshed
  MasterLoadbalancer masterEndpoint = master.getEndpoint(); // where to send the ClientRequest to

  //
  // CREATING A NODE CALIBRATION TABLE FOR A NODE TYPE
  //

  // most inner maps: one map for every RPS entry, the map specifies the millicores cost for every service involved
  // WF1
  Map<String,Rat> a_wf1_25 = map[Pair("frontend",462),Pair("currencyservice",318),Pair("adservice",60),Pair("cartservice",63),Pair("productcatalogservice",41),Pair("redis-cart",11)];
  Map<String,Rat> a_wf1_50 = map[Pair("frontend",769),Pair("currencyservice",549),Pair("adservice",81),Pair("cartservice",98),Pair("productcatalogservice",65),Pair("redis-cart",16)];
  Map<String,Rat> a_wf1_75 = map[Pair("frontend",1000),Pair("currencyservice",724),Pair("adservice",97),Pair("cartservice",128),Pair("productcatalogservice",85),Pair("redis-cart",21)];
  Map<String,Rat> a_wf1_100 = map[Pair("frontend",1175),Pair("currencyservice",879),Pair("adservice",113),Pair("cartservice",155),Pair("productcatalogservice",103),Pair("redis-cart",24)];
  Map<String,Rat> a_wf1_125 = map[Pair("frontend",1298),Pair("currencyservice",998),Pair("adservice",128),Pair("cartservice",172),Pair("productcatalogservice",119),Pair("redis-cart",27)];
  Map<String,Rat> a_wf1_150 = map[Pair("frontend",1388),Pair("currencyservice",1074),Pair("adservice",143),Pair("cartservice",182),Pair("productcatalogservice",133),Pair("redis-cart",29)];
  Map<String,Rat> a_wf1_175 = map[Pair("frontend",1465),Pair("currencyservice",1117),Pair("adservice",154),Pair("cartservice",177),Pair("productcatalogservice",144),Pair("redis-cart",28)];
  Map<String,Rat> a_wf1_200 = map[Pair("frontend",1555),Pair("currencyservice",1174),Pair("adservice",164),Pair("cartservice",175),Pair("productcatalogservice",152),Pair("redis-cart",27)];

  // WF2
  Map<String,Rat> a_wf2_50 = map[Pair("frontend",481),Pair("currencyservice",316),Pair("adservice",59),Pair("cartservice",60),Pair("productcatalogservice",40),Pair("redis-cart",11)];
  Map<String,Rat> a_wf2_50 = map[Pair("frontend",796),Pair("currencyservice",539),Pair("adservice",78),Pair("cartservice",93),Pair("productcatalogservice",65),Pair("redis-cart",16)];
  Map<String,Rat> a_wf2_75 = map[Pair("frontend",1046),Pair("currencyservice",725),Pair("adservice",98),Pair("cartservice",127),Pair("productcatalogservice",85),Pair("redis-cart",21)];
  Map<String,Rat> a_wf2_100 = map[Pair("frontend",1212),Pair("currencyservice",858),Pair("adservice",111),Pair("cartservice",147),Pair("productcatalogservice",103),Pair("redis-cart",24)];
  Map<String,Rat> a_wf2_125 = map[Pair("frontend",1342),Pair("currencyservice",981),Pair("adservice",126),Pair("cartservice",166),Pair("productcatalogservice",119),Pair("redis-cart",26)];
  Map<String,Rat> a_wf2_150 = map[Pair("frontend",1440),Pair("currencyservice",1051),Pair("adservice",139),Pair("cartservice",173),Pair("productcatalogservice",131),Pair("redis-cart",27)];
  Map<String,Rat> a_wf2_175 = map[Pair("frontend",1539),Pair("currencyservice",1108),Pair("adservice",153),Pair("cartservice",174),Pair("productcatalogservice",142),Pair("redis-cart",27)];
  Map<String,Rat> a_wf2_200 = map[Pair("frontend",1645),Pair("currencyservice",1169),Pair("adservice",164),Pair("cartservice",170),Pair("productcatalogservice",150),Pair("redis-cart",26)];


  // 2nd level maps: given a RPS value (Int), it returns the inner map with the cost for every service involved
  // WF1
  Map<Int,Map<String,Rat>> a_wf1 = map[Pair(25,a_wf1_25),Pair(50,a_wf1_50),Pair(75,a_wf1_75),Pair(100,a_wf1_100),Pair(125,a_wf1_125),Pair(150,a_wf1_150),Pair(175,a_wf1_175),Pair(200,a_wf1_200)];

  // WF2
  Map<Int,Map<String,Rat>> a_wf2 = map[Pair(25,a_wf2_25),Pair(50,a_wf2_50),Pair(75,a_wf2_75),Pair(100,a_wf2_100),Pair(125,a_wf2_125),Pair(150,a_wf2_150),Pair(175,a_wf2_175),Pair(200,a_wf2_200)];

  // Full calibration map for a node type, associates every workflow with its 2nd level map
  // <WF , <RPS , <SERVICE , millicores>>>
  Map<String,Map<Int,Map<String,Rat>>> typeA_calibrationMaps = map[Pair("wf1",a_wf1),Pair("wf2",a_wf2)];

  // Create some nodes
  Bool fb = master.createNodes(4,4000,4000,0,typeA_calibrationMaps); // Number of nodes, CPU capacity, Memory capacity, Base system load, calibration map

  //
  // SERVICES CREATION
  //

  // ServiceConfig: String name, Int startingPods, Int minPods, Int maxPods, Rat scalerCycle,
  //                Rat upscaleThreshold, Rat downscaleThreshold, Int downscalePeriod
  ServiceConfig emailserviceServiceConfig = ServiceConfig("emailservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  // PodConfig: Rat monitorCycle, Rat memoryCooldown, Rat cpuRequest, Rat cpuLimit, Int costGranularity
  PodConfig emailservicePodConfig = PodConfig(1, 0, 250, 400, costGranularity);
  ServiceConfig checkoutserviceServiceConfig = ServiceConfig("checkoutservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig checkoutservicePodConfig = PodConfig(1, 0, 250, 400, costGranularity);
  ServiceConfig recommendationserviceServiceConfig = ServiceConfig("recommendationservice", 4, 4, 4, 1, 80/100, 5/100, 10);
  PodConfig recommendationservicePodConfig = PodConfig(1, 0, 250, 400, costGranularity);
  ServiceConfig frontendServiceConfig = ServiceConfig("frontend", 8, 8, 8, 1, 80/100, 5/100, 10);
  PodConfig frontendPodConfig = PodConfig(1, 0, 450, 3000, costGranularity);
  ServiceConfig paymentserviceServiceConfig = ServiceConfig("paymentservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig paymentservicePodConfig = PodConfig(1, 0, 100, 500, costGranularity);
  ServiceConfig productcatalogserviceServiceConfig = ServiceConfig("productcatalogservice", 4, 4, 4, 1, 80/100, 5/100, 10);
  PodConfig productcatalogservicePodConfig = PodConfig(1, 0, 250, 400, costGranularity);
  ServiceConfig cartserviceServiceConfig = ServiceConfig("cartservice", 4, 4, 4, 1, 80/100, 5/100, 10);
  PodConfig cartservicePodConfig = PodConfig(1, 0, 350, 400, costGranularity);
  ServiceConfig currencyserviceServiceConfig = ServiceConfig("currencyservice", 8, 8, 8, 1, 80/100, 5/100, 10);
  PodConfig currencyservicePodConfig = PodConfig(1, 0, 450, 500, costGranularity);
  ServiceConfig shippingserviceServiceConfig = ServiceConfig("shippingservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig shippingservicePodConfig = PodConfig(1, 0, 100, 500, costGranularity);
  ServiceConfig rediscartServiceConfig = ServiceConfig("redis-cart", 4, 4, 4, 1, 80/100, 5/100, 10);
  PodConfig rediscartPodConfig = PodConfig(1, 0, 220, 325, costGranularity);
  ServiceConfig adserviceServiceConfig = ServiceConfig("adservice", 4, 4, 4, 1, 80/100, 5/100, 10);
  PodConfig adservicePodConfig = PodConfig(1, 0, 350, 400, costGranularity);

  // map containing the rules for pods scheduling. If specified for a service, every time the a new pod is deployed
  // for that service, the pod will end up on the node specified by the rule.
  // These lists are circular, once the end is reached the schedule will start over from the first element.
  // The specified numbers in the lists are the Node-IDs.
  Map<String,List<Int>> rulesMap = map[];
  rulesMap = put(rulesMap,"frontend",list[1,2,3,4]);
  rulesMap = put(rulesMap,"currencyservice",list[1,2,3,4]);
  rulesMap = put(rulesMap,"adservice",list[1,2,3,4]);
  rulesMap = put(rulesMap,"cartservice",list[1,2,3,4]);
  rulesMap = put(rulesMap,"productcatalogservice",list[1,2,3,4]);
  rulesMap = put(rulesMap,"redis-cart",list[1,2,3,4]);
  rulesMap = put(rulesMap,"recommendationservice",list[1,2,3,4]);

  master.setSchedulerRulesMap(rulesMap); // set it in in the master

  // Services instantiation
  Service emailservice = new ServiceObject(emailserviceServiceConfig, emailservicePodConfig);
  Service checkoutservice = new ServiceObject(checkoutserviceServiceConfig, checkoutservicePodConfig);
  Service recommendationservice = new ServiceObject(recommendationserviceServiceConfig, recommendationservicePodConfig);
  Service frontend = new ServiceObject(frontendServiceConfig, frontendPodConfig);
  Service paymentservice = new ServiceObject(paymentserviceServiceConfig, paymentservicePodConfig);
  Service productcatalogservice = new ServiceObject(productcatalogserviceServiceConfig, productcatalogservicePodConfig);
  Service cartservice = new ServiceObject(cartserviceServiceConfig, cartservicePodConfig);
  Service currencyservice = new ServiceObject(currencyserviceServiceConfig, currencyservicePodConfig);
  Service shippingservice = new ServiceObject(shippingserviceServiceConfig, shippingservicePodConfig);
  Service rediscart = new ServiceObject(rediscartServiceConfig, rediscartPodConfig);
  Service adservice = new ServiceObject(adserviceServiceConfig, adservicePodConfig);

  // Deploy the services
  List<Service> services = list[emailservice,checkoutservice,recommendationservice,frontend,paymentservice,
                                productcatalogservice,cartservice,currencyservice,shippingservice,rediscart,
                                adservice];

  foreach (s in services){
    master.deployService(s);
  }

  // set up the printer and pass the services to output
  Printer printer = new PrinterObject2(); // PrinterObject: default printer, PrinterObject2: plot ready output
  List<Service> sList = list[frontend,currencyservice,cartservice,productcatalogservice,adservice,recommendationservice,rediscart];
  printer!printStatus(master,sList,110,1); // master, services, numberOfCycles, cycleFrequency [time units]

  // Create workflowsData
  WorkflowData wf1Data = WorkflowData("wf1",list["frontend","currencyservice","adservice","cartservice","productcatalogservice","redis-cart"]);
  WorkflowData wf2Data = WorkflowData("wf2",list["frontend","currencyservice","adservice","cartservice","productcatalogservice","redis-cart"]);

  // create ClientRequest (wfData,ReqSize)
  ClientRequest cr1 = ClientRequest(wf1Data,400);
  ClientRequest cr2 = ClientRequest(wf2Data,200);

  await duration(5,5);

  //ClientWorkflow(ServiceTask t,Int times,Rat delay,Int timesGranularity)
  Client c1 = new ClientObject(cr1,masterEndpoint,80,rat(1.0));
  Client c2 = new ClientObject(cr2,masterEndpoint,50,rat(1.0));

  c2!start();
  c1!start();

}
