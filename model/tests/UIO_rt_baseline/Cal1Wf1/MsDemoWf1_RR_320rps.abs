module MicroservicesDemoTest1;

import * from K8sService;
import * from K8sMaster;
import * from K8sUtil;
import * from K8sWorkflow;
import * from ABS.DC;

interface Client{
  List<Rat> start();
}
class ClientWorkflow(ServiceTask t,Int times,Rat delay,Int timesGranularity) implements Client {

  List<Rat> start(){
    Rat partialResponseTime = 0;
    List<Rat> responseTimes = list[];
    List<Fut<Rat>> rTimes = list[];
    Int counter = times;

    while(counter > 0){
      Fut<Rat> fTime = t!executeWorkflow();
      rTimes = appendright(rTimes,fTime);
      counter = counter - 1;

      await duration(delay,delay);
    }

    Int partialCounter = timesGranularity;

    foreach (tf in rTimes){
      await tf?;
      Rat t = tf.get;


      partialResponseTime = partialResponseTime + t;
      partialCounter = partialCounter - 1;
      if (partialCounter == 0) {
        partialCounter = timesGranularity;
        partialResponseTime = partialResponseTime / timesGranularity;
        responseTimes = appendright(responseTimes,partialResponseTime);
        partialResponseTime = 0;
      }
    }

    return responseTimes;

  }

}





{
  Int timeUnitSize = 2;
  Int costGranularity = 100;

  CloudProvider cp = new CloudProvider("Cloud");
  Master master = new MasterObject(cp,timeUnitSize,1,1,costGranularity);
  Bool fb = master.createNodes(4,4000,4000,100);

  ServiceConfig emailserviceServiceConfig = ServiceConfig("emailservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig emailservicePodConfig = PodConfig(1, 1, 0, 100, 500, costGranularity);
  ServiceConfig checkoutserviceServiceConfig = ServiceConfig("checkoutservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig checkoutservicePodConfig = PodConfig(1, 1, 0, 100, 500, costGranularity);
  ServiceConfig recommendationserviceServiceConfig = ServiceConfig("recommendationservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig recommendationservicePodConfig = PodConfig(1, 1, 0, 100, 500, costGranularity);
  ServiceConfig frontendServiceConfig = ServiceConfig("frontend", 5, 5, 5, 1, 80/100, 5/100, 10);
  PodConfig frontendPodConfig = PodConfig(1, 1, 0, 600, 3000, costGranularity);
  ServiceConfig paymentserviceServiceConfig = ServiceConfig("paymentservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig paymentservicePodConfig = PodConfig(1, 1, 0, 100, 500, costGranularity);
  ServiceConfig productcatalogserviceServiceConfig = ServiceConfig("productcatalogservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig productcatalogservicePodConfig = PodConfig(1, 1, 0, 100, 500, costGranularity);
  ServiceConfig cartserviceServiceConfig = ServiceConfig("cartservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig cartservicePodConfig = PodConfig(1, 1, 0, 200, 500, costGranularity);
  ServiceConfig currencyserviceServiceConfig = ServiceConfig("currencyservice", 5, 5, 5, 1, 80/100, 5/100, 10);
  PodConfig currencyservicePodConfig = PodConfig(1, 1, 0, 600, 1000, costGranularity);
  ServiceConfig shippingserviceServiceConfig = ServiceConfig("shippingservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig shippingservicePodConfig = PodConfig(1, 1, 0, 100, 500, costGranularity);
  ServiceConfig rediscartServiceConfig = ServiceConfig("rediscart", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig rediscartPodConfig = PodConfig(1, 1, 0, 70, 500, costGranularity);
  ServiceConfig adserviceServiceConfig = ServiceConfig("adservice", 2, 1, 30, 1, 80/100, 5/100, 10);
  PodConfig adservicePodConfig = PodConfig(1, 1, 0, 200, 500, costGranularity);

  Map<String,List<Int>> rulesMap = map[];
  rulesMap = put(rulesMap,"frontend",list[1,3]);
  rulesMap = put(rulesMap,"currencyservice",list[2,4]);

  master.setSchedulerRulesMap(rulesMap);


  ServiceLoadBalancerPolicy policy = new RoundRobinLbPolicy();

  Service emailservice = new ServiceObject(emailserviceServiceConfig, emailservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service checkoutservice = new ServiceObject(checkoutserviceServiceConfig, checkoutservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service recommendationservice = new ServiceObject(recommendationserviceServiceConfig, recommendationservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service frontend = new ServiceObject(frontendServiceConfig, frontendPodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service paymentservice = new ServiceObject(paymentserviceServiceConfig, paymentservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service productcatalogservice = new ServiceObject(productcatalogserviceServiceConfig, productcatalogservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service cartservice = new ServiceObject(cartserviceServiceConfig, cartservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service currencyservice = new ServiceObject(currencyserviceServiceConfig, currencyservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service shippingservice = new ServiceObject(shippingserviceServiceConfig, shippingservicePodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service rediscart = new ServiceObject(rediscartServiceConfig, rediscartPodConfig, policy);
  policy = new RoundRobinLbPolicy();
  Service adservice = new ServiceObject(adserviceServiceConfig, adservicePodConfig, policy);

  List<Service> services = list[emailservice,checkoutservice,recommendationservice,frontend,paymentservice,
                                productcatalogservice,cartservice,currencyservice,shippingservice,rediscart,
                                adservice];

  foreach (s in services){
    master.deployService(s);
  }

  ServiceEndpoint emailserviceEP = await emailservice!getServiceEndpoint();
  ServiceEndpoint checkoutserviceEP = await checkoutservice!getServiceEndpoint();
  ServiceEndpoint recommendationserviceEP = await recommendationservice!getServiceEndpoint();
  ServiceEndpoint frontendEP = await frontend!getServiceEndpoint();
  ServiceEndpoint paymentserviceEP = await paymentservice!getServiceEndpoint();
  ServiceEndpoint productcatalogserviceEP = await productcatalogservice!getServiceEndpoint();
  ServiceEndpoint cartserviceEP = await cartservice!getServiceEndpoint();
  ServiceEndpoint currencyserviceEP = await currencyservice!getServiceEndpoint();
  ServiceEndpoint shippingserviceEP = await shippingservice!getServiceEndpoint();
  ServiceEndpoint rediscartEP = await rediscart!getServiceEndpoint();
  ServiceEndpoint adserviceEP = await adservice!getServiceEndpoint();

  Int batchSize = 320;

  Request request1 = Request("request_1", 3600, 1, batchSize, 0, 1/20);
  Request request2 = Request("request_2", 2600, 1, batchSize, 0, 1/20);
  Request request3 = Request("request_3", 400, 1, batchSize, 0, 1/20);
  Request request4 = Request("request_4", 330, 1, batchSize, 0, 1/20);
  Request request5 = Request("request_5", 230, 1, batchSize, 0, 1/20);

  ServiceTask frontendTask = new ServiceRequest(frontendEP,request1);
  ServiceTask currencyTask = new ServiceRequest(currencyserviceEP,request2);
  ServiceTask cartTask = new ServiceRequest(cartserviceEP,request3);
  ServiceTask productcatalogTask = new ServiceRequest(productcatalogserviceEP,request4);
  ServiceTask adTask = new ServiceRequest(adserviceEP,request5);

  PolyFunction wf1Pf = PolyFunction(list[list[281.632947435528,-24.8783422825102,0.0563992273264907],
                                         list[392.452406432068,-55.0177251184715,2.70959245914725],
                                         list[6581.82486053585,-3135.55575546095,386.352603687442]],
                                    list[0.1289375,0.23715625]);
  ServiceTask workflow1 = new ServiceWorkflow(Cons(list[frontendTask],Cons(list[currencyTask,cartTask,productcatalogTask,adTask],Nil)),35,wf1Pf);
  //ServiceTask workflow2 = new ServiceWorkflow(list[list[adTask],list[workflow1]]);

  Printer printer = new PrinterObject2();
  List<Service> sList = list[frontend,currencyservice,cartservice,productcatalogservice,adservice];

  printer!printStatus(master,sList,80,1);

  await duration(5,5);

  //ClientWorkflow(ServiceTask t,Int times,Rat delay,Int timesGranularity)
  Client c1 = new ClientWorkflow(workflow1,70,rat(1.0),10);
  List<Rat> rts = await c1!start();

  foreach (t in rts){
    println("c1 avg response time:" + toString(float(t)));
  }

}
